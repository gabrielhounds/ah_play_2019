var isMobile = function() {
    var check = false;
    (function(a) {
        if (/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(a) || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(a.substr(0, 4))) check = true
    })(navigator.userAgent || navigator.vendor || window.opera);
    return check
}();
$(document).ready(function() {
    init()
});

function init() {

	var hamburger = $('#hamburger');

	$(hamburger).click(function(){
		if( $('.header').hasClass('open') ) {
			//$('.header').removeClass('open');
			//$('.navItem').removeClass('open');
			t.to($('.navItem'), 0.1, {visibility:'hidden', opacity:0, ease:Power3.easeOut, onComplete:function(){
				$('.header').removeClass('open');
				$('.navItem').removeClass('open');
			}});
			t.to('#burger1', 0.3, {rotation:'0deg', y:'0px', ease:Power2.easeOut});
			t.to('#burger2', 0.3, {opacity:1, ease:Power2.easeOut});
			t.to('#burger3', 0.3, {rotation:'0deg',y:'0px',  ease:Power2.easeOut});
		} else {
			$('.header').addClass('open');
			$('.navItem').addClass('open');
			t.to($('.navItem'), 0.3, {visibility:'visible', opacity:1, ease:Power2.easeOut});
			t.to('#burger1', 0.3, {rotation:'45deg', y:'9px', ease:Power2.easeOut});
			t.to('#burger2', 0.3, {opacity:0, ease:Power2.easeOut});
			t.to('#burger3', 0.3, {rotation:'-45deg',y:'-9px',  ease:Power2.easeOut});
		}
	});

    ga("create", "UA-123255686-1", "auto");
    var log = console.log;
    Number.isInteger = Number.isInteger || function(value) {
        return typeof value === "number" && isFinite(value) && Math.floor(value) === value
    };
    var testTime = 0;
    var Utils = {};
    var Game = {};
    var Sounds = {};
    var Sprites = {};
    var Text = {};
    var t = TweenMax;
    var tlIntro = new TimelineMax({
        paused: true
    });
    var tlOutro = new TimelineMax({
        paused: true
    });
    var tlEndOut = new TimelineMax({
        paused: true
    });
    var tlGameOver = new TimelineMax({
        paused: true
    });
    Text = function() {
        var interfaceTextStyle = new PIXI.TextStyle({
            align: "center",
            fontFamily: "uniform_roundedbold",
            fontSize: "28px",
            letterSpacing: 1,
            fill: "0xFFFFFF"
        });
        var ctaTextStyle = new PIXI.TextStyle({
            align: "center",
            fontFamily: "uniform_roundedbold",
            fontSize: "28px",
            letterSpacing: 1,
            fill: "0xFFFFFF"
        });
        var subHeadTextStyle = new PIXI.TextStyle({
            align: "center",
            fontSize: "36px",
            fontFamily: "uniform_roundedbold",
            fill: "0xFFFFFF",
            letterSpacing: 1
        });
        var yourScoreTextStyle = new PIXI.TextStyle({
            align: "center",
            fontSize: "100px",
            fontFamily: "uniform_roundedultra",
            fill: "0xFFFFFF",
            letterSpacing: -4,
            lineHeight: 10
        });
        return {
            interfaceTextStyle: interfaceTextStyle,
            ctaTextStyle: ctaTextStyle,
            subHeadTextStyle: subHeadTextStyle,
            yourScoreTextStyle: yourScoreTextStyle
        }
    }();
    window.addEventListener("touchstart", function() {
        touchDevice = true
    });
    var touchDevice = false;
    var loadingText, scoreText, timerText, scoreIcon, timerIcon, timerBg;
    var interfaceHolder, heartHolder, timerHolder, scoreHolder;
    var timerSectors, timerSectorLength, beginAngle;
    var heart1, heart2, heart3;
    var rotateAlert;
    var stageHit;
    var bgHoler, sky, buildings, street, cloudsFront, cloudsMid, cloudsBack, trees, bgNebula, starsFront, starsBack;
    var airHead, airBody, leftLeg, rightLeg, leftArm, rightArm, headTextures, head, braid, torso, lowerLeftLeg, lowerRightLeg, upperLeftLeg, upperRightLeg, lowerRightArm, lowerLeftArm, upperRightArm, upperLeftArm, airHeadMouthCollision;
    var timePlayed = 0;
    var gamePlaying = false;
    var gamePlayTimerIncrease = false;
    var ctaBg, ctaText, ctaHolder, overlay, ahLogo, logoTextures, instructionText, cabLogo, cabCatch, cabA, cabBite, cabBg, cabCandy1, cabCandy2, cabCandy3, cabCandy4, intro;
    var main, bgHolder, candyHolder, fgHolder, airheadHolder, hitRect;
    var sky_bg, buildings, trees, hedges, street, lightpoles;
	var candy0, candy1, candy2, candy3, candy4, candy5, candy6, candy7, candy8, candy9, candy10, candy11, candy12;
    var airHead, airBody, leftArm, rightArm, leftLeg, rightLeg, torso, head, pelvis, headTextures, ashleigh;
    var candies = [];
    var endFrame, overlayEnd, endCtaBg1, endCtaBg2, endCtaHolder1, endCtaHolder2, endCtaText1, endCtaText2, ahLogoEnd, yourScoreText, endSubhead;
    var cabLogoEnd, cabCatchEnd, cabAEnd, cabBiteEnd, cabBgEnd, cabCandy1End, cabCandy2End, cabCandy3End, cabCandy4End;
    var bgSound, flapSound, buttonSound, eatSound, loseSound, winSound, overSound;
    var Application = PIXI.Application,
        loader = PIXI.loader,
        resources = PIXI.loader.resources,
        Sprite = PIXI.Sprite,
        gameTime = 30,
        elapsedTime = 0,
        timerSectors = 30,
        timerSectorLength = Math.PI * 2 / timerSectors,
        beginAngle = 0 / timerSectors * Math.PI * 2,
        lives = 3,
        mainBlurAmount = 10,
        topHits = 0,
        bottomHits = 0,
        score = 0,
        flapBoost = 0,
        sinkRate = 4,
        candySpeed = 3,
        skyScrollRate = .3,
        buildingScrollRate = .6,
        treesScrollRate = .7,
        hedgesScrollRate = .8,
        streetScrollRate = 1,
        fgScrollRate = 1.5,
        bgSpeedMod = 0,
        candySpeedMod = 0,
        won, lost, app, playing = false,
        introPlaying = false,
        gameFinished = false,
        _width = window.innerWidth,
        _height = window.innerHeight;
    var clickCount = 0;
    var screenSize;
    var screenHeight;
    var ticker = new PIXI.ticker.Ticker({
        autoStart: false
    });
    var introTicker = new PIXI.ticker.Ticker({
        autoStart: false
    });
    ticker.autoStart = false;
    introTicker.autoStart = false;
    ticker.stop();
    introTicker.stop();
    Utils = function() {
        var getMousePosition = function() {
            return app.renderer.plugins.interaction.mouse.global
        };
        var random = function(min, max) {
            if (max == null) {
                max = min;
                min = 0
            }
            return Math.round(Math.random() * (max - min) + min)
        };
        var hitTest = function(r1, r2) {
            hit = false;
            ab = r1.getBounds();
            bb = r2.getBounds();
            if (ab.x + ab.width / 1.5 > bb.x && ab.x < bb.x + bb.width && ab.y + ab.height / 1.5 > bb.y && ab.y < bb.y + bb.height) {
                hit = true
            } else {
                hit = false
            }
            return hit
        };
        var enemyTest = function(r1, r2) {
            hit = false;
            ab = r1.getBounds();
            bb = r2.getBounds();
            if (ab.x + ab.width / 1.5 > bb.x && ab.x < bb.x + bb.width && ab.y + ab.height / 1.5 > bb.y && ab.y < bb.y + bb.height) {
                hit = true
            } else {
                hit = false
            }
            return hit
        };
        return {
            random: random,
            hitTest: hitTest,
            enemyTest: enemyTest,
            getMousePosition: getMousePosition
        }
    }();
    ticker.add(function(delta) {});
    initStage();
    initLoader();

    function initStage() {
        var gameHolder = $(".gameHolder");
        var gameHolderShadow = $(".gameHolderShadow");
        var gameContainer = $("#gameContainer");
        var ghWidth = $(gameContainer).width();
        var ghsWidth = $(gameHolderShadow).width();
        var game = $("<div>", {
            id: "game"
        }).appendTo(gameContainer);
        if (_width >= 1280) {
            screenSize = "desktop";
            $(game).css({
                width: ghWidth,
                height: 500
            });
            app = new Application({
                width: ghWidth,
                height: 500,
                legacy: true
            })
        } else if (_width < 1280 && _width >= 768) {
            //screenSize = "tablet";
            screenSize = "desktop";
            $(game).css({
                width: "100%",
                height: 500
            });
            app = new Application({
                width: ghWidth,
                height: 500
            })
        } else if (_width < 768) {
            if (isMobile === true) {
                screenSize = "mobile";
                $(game).css({
                    width: "100%",
                    height: "100%"
                });
                $(gameHolder).css({
                    width: "100%",
                    height: "100%",
                    top: 0,
                    left: 0
                });
                $(gameContainer).css({
                    width: "100%",
                    height: "100%",
                    top: 0,
                    left: 0,
                    transform: "translate(0)"
                });
                app = new Application({
                    width: _width,
                    height: _height,
                    forceCanvas: true
                });
                if (_height < 600) {
                    screenHeight = "small"
                } else {
                    screenHeight = "normal"
                }
            }
            if (isMobile === false && _height > 608) {
                //screenSize = "tablet";
                screenSize = "desktop";
                $(game).css({
                    width: "100%",
                    height: 500
                });
                app = new Application({
                    width: ghWidth,
                    height: 500
                })
            }
        }
        app.renderer.backgroundColor = 16547;
        var ua = navigator.userAgent.toLowerCase();
        var isAndroid = ua.indexOf("android") > -1;
        if (isAndroid) {
            app.renderer.plugins.interaction.autoPreventDefault = false;
            app.renderer.view.style["touch-action"] = "auto"
        }
        $(app.view).appendTo(game);
        stageW = app.renderer.view.width;
        stageH = app.renderer.view.height;
        loadingText = new PIXI.Text("LOADING      ");
        loadingText.style = {
            fill: "WHITE",
            font: "20px uniform_roundedbold, Arial"
        };
        loadingText.position.set(stageW / 2 - loadingText.width / 2, stageH / 2);
        app.stage.addChild(loadingText)
    }

    function initLoader() {
        loader.add(["images/bg_sky_@2x.jpg", "images/bg_nebula.png", "images/bg_stars_back.png", "images/bg_stars_front.png", "images/bg_buildings.png", "images/bg_clouds_front.png", "images/bg_clouds_mid.png", "images/bg_clouds_back.png", "images/bg_street.png", "images/bg_trees.png", "images/ah_head_00.png", "images/ah_head_01.png", "images/ah_lower_left_arm.png", "images/ah_lower_left_leg.png", "images/ah_lower_right_arm.png", "images/ah_lower_right_leg.png", "images/ah_braid.png", "images/ah_torso.png", "images/ah_upper_left_arm.png", "images/ah_upper_left_leg.png", "images/ah_upper_right_arm.png", "images/ah_upper_right_leg.png", "images/candy_00.png", "images/candy_01.png", "images/candy_02.png", "images/candy_03.png", "images/candy_04.png", "images/candy_05.png", "images/candy_06.png", "images/candy_07.png", "images/candy_08.png", "images/candy_09.png", "images/candy_10.png",  "images/candy_11.png",  "images/candy_12.png", "images/enemy1.png", "images/enemy2.png", "images/enemy3B.png", "images/enemy4.png", "images/heart.png", "images/candy_scoreIcon.png", "images/cta_bg.png", "images/introScreen.jpg", "images/introCandy.png", "images/introLogoC.png", "images/introBG.jpg", "images/endframeScreen.jpg", "images/introSideBG.png", "images/overlayBg_@2x.png", "images/introAirHeadLogo.png", "images/introInstructionsB.png", "images/introInstructionsBMobile.png", "images/endframeBackground.jpg" , 'images/overlay.png',	'images/fa_logo.png', 'images/endFrame_bg.png', 'images/fa_logo_end.png', 'images/endFrame_bg_mobile.jpg']).on("progress", loadProgressHandler).load(setUp)
    }

    function setUp() {
        stageHit = new PIXI.Graphics;
        stageHit.beginFill(16724736);
        stageHit.drawRect(0, 0, stageW, stageH);
        stageHit.endFill();
        stageHit.alpha = 0;
        stageHit.interactive = true;
        stageHit.buttonMode = true;
        stageHit.hitArea = new PIXI.Rectangle(0, 0, stageHit.width, stageHit.height);
        intro = new PIXI.Container({
            width: stageW,
            height: stageH
        });
        ctaHolder = new PIXI.Container;
        ctaBg = new PIXI.Sprite(resources["images/cta_bg.png"].texture);
        ctaText = new PIXI.Text(" Play now ");
        ctaText.style = Text.ctaTextStyle;
        introBG = new PIXI.Sprite(resources["images/introBG.jpg"].texture);
        introCandy = new PIXI.Sprite(resources["images/introCandy.png"].texture);
        introLogo = new PIXI.Sprite(resources["images/fa_logo.png"].texture);
        introSideBG = new PIXI.Sprite(resources["images/overlay.png"].texture);
        introAirHeadLogo = new PIXI.Sprite(resources["images/introAirHeadLogo.png"].texture);
        instructionText = new PIXI.Text(" Drag your mouse.\nCatch some candy.\nIt's that easy. ");
        instructionText.style = Text.interfaceTextStyle;
        introClicked = new PIXI.Sprite;
        introClicked.width = stageW;
        introClicked.height = stageH;
        introClicked.interactive = true;
        introClicked.buttonMode = true;
        introClicked.on("tap", function(e) {
            $("#bg_clickthrough").click();
            e.preventDefault()
        });
        introClicked.on("click", function(e) {
            $("#bg_clickthrough").click()
        });
        if (screenSize == "desktop") {
            introBG.anchor.set(.5);
            introBG.position.set(stageW / 2, stageH / 2);
            introCandy.anchor.set(.5);
            introCandy.position.set(450, 225);
            introLogo.anchor.set(.5);


            introLogo.position.set(stageW / 2, 225);
            introSideBG.position.set(860, 0);
            introAirHeadLogo.anchor.set(.5);
            introAirHeadLogo.position.set(1080, 170);
            instructionText.position.set(introBG.x + introBG.width / 2 - instructionText.width / 2, stageH - instructionText.height - 60);
            instructionText.alpha = 0;
            ctaHolder.position.set(440, 420);
            ctaHolder.position.set(stageW / 2, 420);
            introSideBG.alpha = 0;
            introAirHeadLogo.alpha = 0;
            introLogo.position.set(stageW / 2, 215);
            introCandy.position.set(650, 215)
        } else if (screenSize == "tablet") {
            t.to(introCandy, 0, {
                pixi: {
                    scale: .65
                }
            });
            introCandy.anchor.set(.5);
            introCandy.position.set(255, stageH / 2);
            t.to(introLogo, 0, {
                pixi: {
                    scale: .6
                }
            });
            introLogo.anchor.set(.5);
            introLogo.position.set(105 + introLogo.width * .5, stageH / 2);
            introSideBG.anchor.set(0);
            introSideBG.position.set(500, 0);
            t.to(introAirHeadLogo, 0, {
                pixi: {
                    scale: ".63"
                },
                ease: Elastic.easeOut
            });
            introAirHeadLogo.anchor.set(.5);
            introAirHeadLogo.position.set(645, 215);
            instructionText.style.fontSize = "20px";
            instructionText.style.letterSpacing = 1;
            instructionText.position.set((stageW - introSideBG.x) / 2 + introSideBG.x - instructionText.width / 2, stageH - instructionText.height - 60);
            ctaHolder.position.set(240, 380);
            t.to(ctaHolder, 0, {
                pixi: {
                    scale: .65
                }
            })
        } else if (screenSize == "mobile") {
            instructionText.setText(" Drag your finger.\nCatch some candy.\nIt's that easy. ");
            t.to(introCandy, 0, {
                pixi: {
                    scale: .45
                }
            });
            introCandy.anchor.set(.5);
            introCandy.position.set(stageW / 2, stageH / 4 - 40);
            t.to(introLogo, 0, {
                pixi: {
                    scale: .5
                }
            });
            introLogo.anchor.set(.5);
            introLogo.position.set(stageW / 2, stageH / 4);
            introSideBG.anchor.set(.5);
            introSideBG.width = stageW;
            introSideBG.rotation = Math.PI / 180 * 90;
            introSideBG.position.set(stageW - introSideBG.width / 2, stageH - 80);
            instructionText.style.fontSize = "18px";
            instructionText.style.letterSpacing = 1;
            instructionText.style.lineHeight = 20;
            instructionText.position.set(stageW / 2 - instructionText.width / 2, stageH - instructionText.height - 20);
            introAirHeadLogo.scale.set(.535);
            introAirHeadLogo.anchor.set(.5);
            introAirHeadLogo.position.set(stageW / 2 - 3, stageH / 2 + introAirHeadLogo.height / 2 + 40);
            ctaHolder.scale.set(.8);
            ctaHolder.position.set(stageW / 2, stageH / 2 - ctaHolder.height / 2 - 30);
            ctaText.position.set(0, -2)
        }
        ctaBg.anchor.set(.5);
        ctaText.anchor.set(.5);
        intro.addChild(introBG);
        intro.addChild(introClicked);
        intro.addChild(introSideBG);
        //intro.addChild(introCandy);
        intro.addChild(introLogo);
        intro.addChild(ctaHolder);
        intro.addChild(introAirHeadLogo);
        intro.addChild(instructionText);
        ctaHolder.addChild(ctaBg);
        ctaHolder.addChild(ctaText);
        ctaHolder.interactive = true;
        ctaHolder.buttonMode = true;
        introAirHeadLogo.interactive = true;
        introAirHeadLogo.buttonMode = true;
        introAirHeadLogo.on("tap", function(e) {
            $("#airheads_logo_clickthrough").click();
            e.preventDefault()
        });
        introAirHeadLogo.on("click", function(e) {
            $("#airheads_logo_clickthrough").click()
        });
        ctaHolder.on("mouseover", function(e) {
            t.to(ctaBg, .6, {
                pixi: {
                    scale: 1.2
                },
                ease: Elastic.easeOut
            });
            t.to(ctaText, .2, {
                pixi: {
                    y: "+=10",
                    alpha: 0
                },
                ease: Power3.easeOut
            });
            t.set(ctaText, {
                pixi: {
                    y: "-=30"
                },
                delay: .2
            });
            t.to(ctaText, .6, {
                pixi: {
                    y: "+=20",
                    alpha: 1,
                    scale: 1.1
                },
                ease: Elastic.easeOut,
                delay: .21
            });
            t.to(ctaText, .1, {
                pixi: {
                    y: 0
                },
                delay: .25
            })
        }).on("mouseout", function(e) {
            t.to(ctaBg, .6, {
                pixi: {
                    scale: 1
                },
                ease: Elastic.easeOut
            });
            t.to(ctaText, .6, {
                pixi: {
                    scale: 1,
                    y: 0
                },
                ease: Elastic.easeOut
            })
        });
        if (screenSize == "desktop") {
            t.from(ctaHolder, .5, {
                pixi: {
                    y: "600"
                },
                ease: Power2.easeOut,
                delay: .5
            });
            t.from(introLogo, 1.5, {
                pixi: {
                    scale: "0"
                },
                ease: Elastic.easeOut,
                delay: .25
            });
            t.from(introCandy, 1.5, {
                pixi: {
                    scale: "0"
                },
                ease: Elastic.easeOut
            });
            t.from(introSideBG, .5, {
                pixi: {
                    y: "600"
                },
                ease: Power2.easeOut,
                delay: 1
            });
            t.from(introAirHeadLogo, 1.5, {
                pixi: {
                    scale: "0"
                },
                ease: Elastic.easeOut,
                delay: 1.25
            });
            t.from(instructionText, .4, {
                pixi: {
                    x: "+=300",
                    alpha: 0
                },
                ease: Power3.easeOut
            })
        } else if (screenSize == "tablet") {
            t.from(ctaHolder, .5, {
                pixi: {
                    y: "600"
                },
                ease: Power2.easeOut,
                delay: .5
            });
            t.from(introLogo, 1.5, {
                pixi: {
                    scale: "0"
                },
                ease: Elastic.easeOut,
                delay: .25
            });
            t.from(introCandy, 1.5, {
                pixi: {
                    scale: "0"
                },
                ease: Elastic.easeOut
            });
            t.from(introSideBG, .5, {
                pixi: {
                    y: "600"
                },
                ease: Power2.easeOut,
                delay: 1
            });
            t.from(introAirHeadLogo, 1.5, {
                pixi: {
                    scale: "0"
                },
                ease: Elastic.easeOut,
                delay: 1.25
            });
            t.from(instructionText, .4, {
                pixi: {
                    x: "+=300",
                    alpha: 0
                },
                ease: Power3.easeOut
            })
        }
        ctaHolder.on("tap", startGame);
        ctaHolder.on("click", startGame);
        setInterval(function() {
            if (gamePlayTimerIncrease == true) {
                timePlayed++
            }
        }, 1e3);

        function startGame() {
            timePlayed = 0;
            gamePlayTimerIncrease = true;
            gamePlaying = true;
            ticker.add(function(delta) {
                handleTimer(delta);
                handleObjects(delta);
                handleBg(delta);
                handleAirHead(delta)
            });
            t.to(enemy, .5, {
                pixi: {
                    rotation: "15"
                },
                yoyo: true,
                repeat: -1,
                ease: Power1.easeInOut
            });
            t.to(enemy4, .2, {
                pixi: {
                    rotation: "5"
                },
                yoyo: true,
                repeat: -1,
                ease: Power1.easeInOut
            });
            t.to(intro, 1, {
                pixi: {
                    alpha: 0
                },
                ease: Power3.easeOut
            });
            ctaHolder.interactive = false;
            ctaHolder.buttonMode = false;
            introClicked.interactive = false;
            introClicked.buttonMode = false;
            introAirHeadLogo.interactive = false;
            introAirHeadLogo.buttonMode = false;
            bgSound.play()
        }
        endframe = new PIXI.Container({
            width: stageW,
            height: stageH
        });
        endframe.visible = false;
        endframeBG = new PIXI.Sprite(resources["images/endFrame_bg.png"].texture);
        endframeBG.anchor.set(.5);
        endframeBG.position.set(stageW / 2, stageH / 2);
        endframeLogo = new PIXI.Sprite(resources["images/fa_logo_end.png"].texture);
        endframeLogo.anchor.set(.5);
        endframeLogo.position.set(stageW / 3, stageH / 4.5);

        endframeCandy = new PIXI.Sprite(resources["images/introCandy.png"].texture);
        endframeCandy.anchor.set(.5);
        endframeCandy.position.set(stageW / 3, stageH / 4.5);
        t.set(endframeCandy, {
            pixi: {
                scale: .5
            }
        });
        ctaHolderEndframe1 = new PIXI.Container;
        ctaBgEndFrame1 = new PIXI.Sprite(resources["images/cta_bg.png"].texture);
        ctaBgEndFrame1.anchor.set(.5);
        ctaEndframe1Text = new PIXI.Text(" Play again ");
        ctaEndframe1Text.style = Text.ctaTextStyle;
        ctaEndframe1Text.anchor.set(.5);
        endframeAirheadLogo = new PIXI.Sprite(resources["images/introAirHeadLogo.png"].texture);
        endframeAirheadLogo.anchor.set(.5);
        endframeAirheadLogo.position.set(1050, stageH / 2);
        t.set(endframeAirheadLogo, {
            pixi: {
                scale: 1
            }
        });
        endframeAirheadLogo.interactive = true;
        endframeAirheadLogo.buttonMode = true;
        endframeAirheadLogo.on("tap", function(e) {
            $("#airheads_logo_clickthrough").click();
            e.preventDefault()
        });
        endframeAirheadLogo.on("click", function(e) {
            $("#airheads_logo_clickthrough").click()
        });
        endframeClicked = new PIXI.Sprite;
        endframeClicked.width = stageW;
        endframeClicked.height = stageH;
        endframeClicked.interactive = true;
        endframeClicked.buttonMode = true;
        endframeClicked.on("tap", function(e) {
            $("#bg_clickthrough").click();
            e.preventDefault()
        });
        endframeClicked.on("click", function(e) {
            $("#bg_clickthrough").click()
        });
        ctaHolderEndframe1.addChild(ctaBgEndFrame1);
        ctaHolderEndframe1.addChild(ctaEndframe1Text);
        ctaHolderEndframe1.interactive = true;
        ctaHolderEndframe1.buttonMode = true;
        ctaHolderEndframe1.on("mouseover", function(e) {
            t.to(ctaBgEndFrame1, .6, {
                pixi: {
                    scale: 1.2
                },
                ease: Elastic.easeOut
            });
            t.to(ctaEndframe1Text, .2, {
                pixi: {
                    y: "+=10",
                    alpha: 0
                },
                ease: Power3.easeOut
            });
            t.set(ctaEndframe1Text, {
                pixi: {
                    y: "-=30"
                },
                delay: .2
            });
            t.to(ctaEndframe1Text, .6, {
                pixi: {
                    y: "+=20",
                    alpha: 1,
                    scale: 1
                },
                ease: Elastic.easeOut,
                delay: .21
            });
            t.to(ctaEndframe1Text, .1, {
                pixi: {
                    y: 0
                },
                delay: .25
            })
        }).on("mouseout", function(e) {
            t.to(ctaBgEndFrame1, .6, {
                pixi: {
                    scale: 1
                },
                ease: Elastic.easeOut
            });
            t.to(ctaEndframe1Text, .6, {
                pixi: {
                    scale: 1,
                    y: 0
                },
                ease: Elastic.easeOut
            })
        });
        ctaHolderEndframe1.on("tap", setUpReplay);
        ctaHolderEndframe1.on("click", setUpReplay);
        endframe.addChild(endframeBG);
        endframe.addChild(endframeClicked);
        endframe.addChild(ctaHolderEndframe1);
        //endframe.addChild(endframeCandy);
        endframe.addChild(endframeLogo);
        endframe.addChild(endframeAirheadLogo);
        ctaHolderEndframe2 = new PIXI.Container;
        ctaBgEndFrame2 = new PIXI.Sprite(resources["images/cta_bg.png"].texture);
        ctaBgEndFrame2.anchor.set(.5);
        ctaEndframe2Text = new PIXI.Text(" Find near you ");
        ctaEndframe2Text.style = Text.ctaTextStyle;
        ctaEndframe2Text.anchor.set(.5);
        ctaHolderEndframe2.addChild(ctaBgEndFrame2);
        ctaHolderEndframe2.addChild(ctaEndframe2Text);
        ctaHolderEndframe2.interactive = true;
        ctaHolderEndframe2.buttonMode = true;
        ctaHolderEndframe2.on("mouseover", function(e) {
            t.to(ctaBgEndFrame2, .6, {
                pixi: {
                    scale: 1.2
                },
                ease: Elastic.easeOut
            });
            t.to(ctaEndframe2Text, .2, {
                pixi: {
                    y: "+=10",
                    alpha: 0
                },
                ease: Power3.easeOut
            });
            t.set(ctaEndframe2Text, {
                pixi: {
                    y: "-=30"
                },
                delay: .2
            });
            t.to(ctaEndframe2Text, .6, {
                pixi: {
                    y: "+=20",
                    alpha: 1,
                    scale: 1
                },
                ease: Elastic.easeOut,
                delay: .21
            });
            t.to(ctaEndframe2Text, .1, {
                pixi: {
                    y: 0
                },
                delay: .25
            })
        }).on("mouseout", function(e) {
            t.to(ctaBgEndFrame2, .6, {
                pixi: {
                    scale: 1
                },
                ease: Elastic.easeOut
            });
            t.to(ctaEndframe2Text, .6, {
                pixi: {
                    scale: 1,
                    y: 0
                },
                ease: Elastic.easeOut
            })
        }).on("tap", function() {
            window.open("http://airheads.com/", "_blank");
            e.preventDefault()
        }).on("click", function() {
            //window.open("http://airheads.com/", "_blank")
            window.open("https://airheads.com/product-locator","_self");
        });
        endframe.addChild(ctaHolderEndframe2);
        yourScoreText = new PIXI.Text("Your score: 0 ");
        yourScoreText.style = Text.yourScoreTextStyle;
        endframe.addChild(yourScoreText);
        endSubhead = new PIXI.Text(" Great job! ");
        endSubhead.style = Text.subHeadTextStyle;
        endframe.addChild(endSubhead);


        if (screenSize == "desktop") {
            endframeBG.anchor.set(.5);
            endframeBG.position.set(stageW / 2, stageH / 2);
            endframeLogo.anchor.set(.5);
            endframeLogo.position.set(stageW / 3, 130);

            endframeCandy.anchor.set(.5);
            endframeCandy.position.set(stageW / 3, stageH / 4.5);
            t.set(endframeCandy, {
                pixi: {
                    scale: .4
                }
            });
            ctaBgEndFrame1.anchor.set(.5);
            ctaEndframe1Text.anchor.set(.5);
            endframeAirheadLogo.anchor.set(.5);
            endframeAirheadLogo.position.set(1033, stageH / 2 - 17);
            t.set(endframeAirheadLogo, {
                pixi: {
                    scale: .98
                }
            });
            ctaBgEndFrame2.anchor.set(.5);
            ctaEndframe2Text.anchor.set(.5);
            ctaHolderEndframe1.position.set(stageW / 3 - ctaHolderEndframe1.width / 2 - 40, stageH / 2 + 160);
            ctaHolderEndframe2.position.set(stageW / 3 + ctaHolderEndframe2.width / 2 + 40, stageH / 2 + 160);
            yourScoreText.position.set(stageW / 3 - yourScoreText.width / 2, 168);
            endSubhead.position.set(stageW / 3 - endSubhead.width / 2, 284)
        } else if (screenSize == "tablet") {
            endframeLogo.anchor.set(.5);
            endframeLogo.position.set(260, 130);

            endframeCandy.anchor.set(.5);
            endframeCandy.position.set(260, 130);
            t.set(endframeCandy, {
                pixi: {
                    scale: .35
                }
            });
            endframeAirheadLogo.anchor.set(.5);
            endframeAirheadLogo.position.set(630, stageH / 2);
            t.set(endframeAirheadLogo, {
                pixi: {
                    scale: .65
                }
            });
            ctaHolderEndframe1.position.set(140, 400);
            t.set(ctaHolderEndframe1, {
                pixi: {
                    scale: .65
                }
            });
            ctaHolderEndframe2.position.set(360, 400);
            t.set(ctaHolderEndframe2, {
                pixi: {
                    scale: .65
                }
            });
            yourScoreText.position.set(15, 225);
            t.set(yourScoreText, {
                pixi: {
                    scale: .6
                }
            });
            endSubhead.position.set(170, 295);
            t.set(endSubhead, {
                pixi: {
                    scale: .65
                }
            })
        } else {
			endframeBG.setTexture(resources['images/endFrame_bg_mobile.jpg'].texture);
			endframeBG.width = stageW;
            endframeBG.height = stageH;

            if (screenHeight === "small") {
                endframeLogo.anchor.set(.5);

                endframeLogo.position.set(stageW / 2, endframeLogo.height / 2 + 45);
                endframeCandy.anchor.set(.5);
                endframeCandy.position.set(stageW / 2, endframeLogo.height / 2 + 45);
                t.set(endframeCandy, {
                    pixi: {
                        scale: .35
                    }
                });
                endframeAirheadLogo.scale.set(.58);
                endframeAirheadLogo.position.set(stageW / 2 - 4, stageH - 25 - endframeAirheadLogo.height / 2);
                ctaHolderEndframe1.scale.set(.5);
                ctaHolderEndframe2.scale.set(.5);
                ctaHolderEndframe1.position.set(stageW / 2 - ctaHolderEndframe1.width / 2 - 10, stageH / 2 + 60);
                ctaHolderEndframe2.position.set(stageW / 2 + ctaHolderEndframe2.width / 2 + 10, stageH / 2 + 60);
                yourScoreText.style.fontSize = "40px";
                yourScoreText.style.letterSpacing = .25;
                yourScoreText.position.set(35, stageH / 2 - yourScoreText.height * 2);
                endSubhead.style.fontSize = "28px";
                endSubhead.position.set(stageW / 2 - endSubhead.width / 2, stageH / 2 - endSubhead.height);
                //endframeBG.anchor.set(.5);
                //endframeBG.position.set(stageW / 2, stageH / 2);

            } else {
                endframeLogo.anchor.set(.5);

                endframeLogo.position.set(stageW / 2, endframeLogo.height / 2);
                endframeCandy.anchor.set(.5);
                endframeCandy.position.set(stageW / 2, endframeLogo.height / 2 + 60);
                t.set(endframeCandy, {
                    pixi: {
                        scale: .35
                    }
                });
                endframeAirheadLogo.scale.set(.58);
                endframeAirheadLogo.position.set(stageW / 2 - 4, stageH - 25 - endframeAirheadLogo.height / 2);
                ctaHolderEndframe1.scale.set(.55);
                ctaHolderEndframe2.scale.set(.55);
                ctaHolderEndframe1.position.set(stageW / 2 - ctaHolderEndframe1.width / 2 - 10, stageH / 2 + 60);
                ctaHolderEndframe2.position.set(stageW / 2 + ctaHolderEndframe2.width / 2 + 10, stageH / 2 + 60);
                yourScoreText.style.fontSize = "40px";
                yourScoreText.style.letterSpacing = .25;
                yourScoreText.position.set(stageW / 2 - yourScoreText.width / 2, stageH / 2 - yourScoreText.height * 2);
                endSubhead.style.fontSize = "28px";
                endSubhead.position.set(stageW / 2 - endSubhead.width / 2, stageH / 2 - endSubhead.height);
                //endframeBG.anchor.set(.5);
                //endframeBG.position.set(stageW / 2, stageH / 2);

            }
        }
        bgHolder = new PIXI.Container;
        starsFront = new PIXI.Sprite(resources["images/bg_stars_front.png"].texture);
        starsBack = new PIXI.Sprite(resources["images/bg_stars_back.png"].texture);
        bgNebula = new PIXI.Sprite(resources["images/bg_nebula.png"].texture);
        sky = new PIXI.Sprite(resources["images/bg_sky_@2x.jpg"].texture);
        street = new PIXI.Sprite(resources["images/bg_street.png"].texture);
        trees = new PIXI.Sprite(resources["images/bg_trees.png"].texture);
        buildings = new PIXI.Sprite(resources["images/bg_buildings.png"].texture);
        cloudsFront = new PIXI.Sprite(resources["images/bg_clouds_front.png"].texture);
        cloudsBack = new PIXI.Sprite(resources["images/bg_clouds_back.png"].texture);
        cloudsMid = new PIXI.Sprite(resources["images/bg_clouds_mid.png"].texture);
        airHead = new PIXI.Container;
        airBody = new PIXI.Container;
        leftLeg = new PIXI.Container;
        rightLeg = new PIXI.Container;
        leftArm = new PIXI.Container;
        rightArm = new PIXI.Container;
        airHeadMouthCollision = new PIXI.Sprite(PIXI.Texture.WHITE);
        headTextures = [resources["images/ah_head_00.png"].texture, resources["images/ah_head_01.png"].texture];
        head = new PIXI.extras.AnimatedSprite(headTextures);
        braid = new PIXI.Sprite(resources["images/ah_braid.png"].texture);
        torso = new PIXI.Sprite(resources["images/ah_torso.png"].texture);
        lowerLeftLeg = new PIXI.Sprite(resources["images/ah_lower_left_leg.png"].texture);
        lowerRightLeg = new PIXI.Sprite(resources["images/ah_lower_right_leg.png"].texture);
        upperLeftLeg = new PIXI.Sprite(resources["images/ah_upper_left_leg.png"].texture);
        upperRightLeg = new PIXI.Sprite(resources["images/ah_upper_right_leg.png"].texture);
        lowerRightArm = new PIXI.Sprite(resources["images/ah_lower_right_arm.png"].texture);
        lowerLeftArm = new PIXI.Sprite(resources["images/ah_lower_left_arm.png"].texture);
        upperRightArm = new PIXI.Sprite(resources["images/ah_upper_right_arm.png"].texture);
        upperLeftArm = new PIXI.Sprite(resources["images/ah_upper_left_arm.png"].texture);
        interfaceHolder = new PIXI.Container;
        scoreText = new PIXI.Text("0");
        scoreIcon = new PIXI.Sprite(resources["images/candy_scoreIcon.png"].texture);
        scoreText.style = Text.interfaceTextStyle;
        timerSectors = 30;
        timerSectorLength = Math.PI / 180 * 360 / timerSectors * 15;
        beginAngle = 0 / timerSectors * Math.PI * 2;
        timerText = new PIXI.Text("00");
        timerBg = new PIXI.Graphics;
        timerIcon = new PIXI.Graphics;
        timerText.style = Text.interfaceTextStyle;
        timerBg.lineStyle(6, 16777215, 1);
        timerIcon.lineStyle(6, 16724736, 1);
        timerBg.arc(stageW - 80, stageH - 40, 10, Math.PI / 180 * 0, Math.PI / 180 * 360, false);
        timerIcon.arc(stageW - 80, stageH - 40, 10, Math.PI / 180 * 0, Math.PI / 180 * 180, false);
        heartHolder = new PIXI.Container;
        heart1 = new PIXI.Sprite(resources["images/heart.png"].texture);
        heart2 = new PIXI.Sprite(resources["images/heart.png"].texture);
        heart3 = new PIXI.Sprite(resources["images/heart.png"].texture);
        hitRect = new PIXI.Graphics;
        hitRect.beginFill(16724736);
        hitRect.drawRect(0, 0, stageW, stageH);
        hitRect.endFill();
        hitRect.alpha = 0;
        hitRect.interactive = true;
        hitRect.buttonMode = true;
        hitRect.hitArea = new PIXI.Rectangle(0, 0, stageW, stageH);
        candyHolder = new PIXI.Container;
        candy0 = new PIXI.Sprite(resources["images/candy_00.png"].texture);
        candy1 = new PIXI.Sprite(resources["images/candy_01.png"].texture);
        candy2 = new PIXI.Sprite(resources["images/candy_02.png"].texture);
        candy3 = new PIXI.Sprite(resources["images/candy_03.png"].texture);
        candy4 = new PIXI.Sprite(resources["images/candy_04.png"].texture);
        candy5 = new PIXI.Sprite(resources["images/candy_05.png"].texture);
        candy6 = new PIXI.Sprite(resources["images/candy_06.png"].texture);
        candy7 = new PIXI.Sprite(resources["images/candy_07.png"].texture);

        candy8 			= new PIXI.Sprite(resources['images/candy_08.png'].texture);
		candy9 			= new PIXI.Sprite(resources['images/candy_09.png'].texture);
		candy10 			= new PIXI.Sprite(resources['images/candy_10.png'].texture);
		candy11 			= new PIXI.Sprite(resources['images/candy_11.png'].texture);
		candy12 			= new PIXI.Sprite(resources['images/candy_12.png'].texture);



        enemy = new PIXI.Sprite(resources["images/enemy1.png"].texture);
        enemy2 = new PIXI.Sprite(resources["images/enemy2.png"].texture);
        enemy3 = new PIXI.Sprite(resources["images/enemy3B.png"].texture);
        enemy4 = new PIXI.Sprite(resources["images/enemy4.png"].texture);
        setPosition()
    }

    function setPosition() {
        head.pivot.set(138, 368);
        head.position.set(head.width - 138, head.height - 308);
        head.loop = false;
        head.animationSpeed = .6;
        torso.position.set(116, 16);
        braid.position.set(116, -30);
        lowerRightArm.position.set(0, 47);
        lowerLeftArm.position.set(6, 45);
        leftArm.pivot.set(-4, 20);
        rightArm.pivot.set(20, 9);
        leftArm.position.set(160 - 4, 18 + 20);
        rightArm.position.set(102 + 20, 18 + 9);
        lowerLeftLeg.position.set(24, 73);
        lowerRightLeg.position.set(-3, 71);
        leftLeg.pivot.set(14, 18);
        rightLeg.pivot.set(20, 12);
        leftLeg.position.set(132 + 14, 68 + 18);
        rightLeg.position.set(114 + 20, 70 + 12);
        airHeadMouthCollision.width = 80;
        airHeadMouthCollision.height = 50;
        airHeadMouthCollision.visible = false;
        airHeadMouthCollision.position.set(100, -80);
        rightArm.addChild(lowerRightArm);
        rightArm.addChild(upperRightArm);
        leftArm.addChild(lowerLeftArm);
        leftArm.addChild(upperLeftArm);
        rightLeg.addChild(lowerRightLeg);
        rightLeg.addChild(upperRightLeg);
        leftLeg.addChild(lowerLeftLeg);
        leftLeg.addChild(upperLeftLeg);
        airBody.addChild(torso);
        airBody.addChild(leftLeg);
        airBody.addChild(rightLeg);
        airBody.addChild(leftArm);
        airBody.addChild(rightArm);
        airHead.addChild(braid);
        airHead.addChild(head);
        airHead.addChild(airBody);
        airHead.addChild(airHeadMouthCollision);
        airHead.scale.set(.6);
        airHead.position.set(stageW / 2 - airHead.width / 2, stageH / 2);
        sky.position.set(0, -sky.height + stageH);
        street.position.set(0, stageH - street.height);
        trees.position.set(0, 290);
        buildings.position.set(0, 220);
        if (screenSize == "mobile") {
            buildings.position.set(0, 420);
            trees.position.set(0, 5e3)
        }
        cloudsFront.position.set(0, 200);
        cloudsBack.position.set(0, -200);
        cloudsMid.position.set(0, -1100);
        bgNebula.position.set(0, sky.y + 700);
        starsBack.position.set(0, sky.y + 500);
        starsFront.position.set(0, sky.y - 420);
        bgHolder.addChild(sky);
        bgHolder.addChild(bgNebula);
        bgHolder.addChild(starsBack);
        bgHolder.addChild(starsFront);
        bgHolder.addChild(cloudsBack);
        bgHolder.addChild(cloudsMid);
        bgHolder.addChild(cloudsFront);
        bgHolder.addChild(buildings);
        bgHolder.addChild(trees);
        bgHolder.addChild(street);
        candyHolder.addChild(candy0);
        candyHolder.addChild(candy1);
        candyHolder.addChild(candy2);
        candyHolder.addChild(candy3);
        candyHolder.addChild(candy4);
        candyHolder.addChild(candy5);
        candyHolder.addChild(candy6);
        candyHolder.addChild(candy7);

        candyHolder.addChild(candy8);
      	candyHolder.addChild(candy9);
      	candyHolder.addChild(candy10);
      	candyHolder.addChild(candy11);
      	candyHolder.addChild(candy12);


        candyHolder.addChild(enemy);
        candyHolder.addChild(enemy2);
        candyHolder.addChild(enemy3);
        candyHolder.addChild(enemy4);
        t.to(enemy3, 0, {
            pixi: {
                scale: .85
            }
        });
		candies = [candy0, candy1, candy2, candy3, candy4, candy5, candy6, candy7, candy8, candy9, candy10, candy11, candy12];
		enemies = [enemy, enemy2, enemy3, enemy4];
        for (var i = 0; i < candies.length; i++) {
            t.to(candies[i], 0, {
                pixi: {
                    scale: 1.2
                }
            });
            if (screenSize === "mobile") {
                candies[i].y = Utils.random(-100, -600);
                candies[i].x = Utils.random(0, stageW)
            } else {
                candies[i].y = Utils.random(-100, -600);
                candies[i].x = Utils.random(0, stageW)
            }
        }
        for (var i = 0; i < enemies.length; i++) {
            enemies[i].anchor.set(.5, 0);
            if (screenSize === "mobile") {
                enemies[i].y = Utils.random(-100, -600);
                enemies[i].x = Utils.random(0, stageW)
            } else {
                enemies[i].y = Utils.random(-100, -600);
                enemies[i].x = Utils.random(0, stageW)
            }
        }

        candy7.scale.set(.85);
      	candy8.scale.set(1.65);
      	candy9.scale.set(1.65);

      	candy10.scale.set(1.6);
      	candy11.scale.set(1.6);
      	candy12.scale.set(1.5);

        enemy.x = 1e4;
        resetBirdPosition();
        scoreText.position.set(76, stageH - scoreText.height - 26);
        scoreIcon.anchor.set(.5);
        scoreIcon.scale.set(.8);
        scoreIcon.position.set(42, stageH - (scoreIcon.height / 2 + 20));
        timerText.position.set(stageW - timerText.width - 20, stageH - timerText.height - 26);
        heart1.position.set(0, 0);
        heart2.position.set(40, 0);
        heart3.position.set(80, 0);
        heartHolder.addChild(heart1);
        heartHolder.addChild(heart2);
        heartHolder.addChild(heart3);
        heartHolder.position.set(30, 20);
        interfaceHolder.addChild(heartHolder);
        //interfaceHolder.addChild(timerBg);
        //interfaceHolder.addChild(timerIcon);
        interfaceHolder.addChild(timerText);
        interfaceHolder.addChild(scoreIcon);
        interfaceHolder.addChild(scoreText);
        buildStage();
        setUpGame()
    }

    function buildStage() {
        app.stage.addChild(bgHolder);
        app.stage.addChild(stageHit);
        app.stage.addChild(airHead);
        app.stage.addChild(candyHolder);
        app.stage.addChild(interfaceHolder);
        app.stage.addChild(intro);
        app.stage.addChild(endframe)
    }

    function setUpGame() {
        initAudio();
        setTimeout(function() {
            ticker.start()
        }, 1e3)
    }

    function initAudio() {
        bgSound = new Howl({
            src: ["sounds/bg-sound.mp3"],
            volume: .3,
            loop: true
        });
        flapSound = new Howl({
            src: ["sounds/jump-sound.mp3"],
            volume: .3
        });
        buttonSound = new Howl({
            src: ["sounds/button-sound.mp3"],
            volume: .3
        });
        eatSound = new Howl({
            src: ["sounds/eat-sound.mp3"],
            volume: .3
        });
        loseSound = new Howl({
            src: ["sounds/lose-sound.mp3"],
            volume: .3
        });
        winSound = new Howl({
            src: ["sounds/win-sound.mp3"],
            volume: .3
        });
        overSound = new Howl({
            src: ["sounds/over-sound.mp3"],
            volume: .3
        });
        var audioCount = 0;

        function updateAudioProgress() {
            audioCount += 1;
            if (audioCount === 7) {}
        }
        bgSound.once("load", updateAudioProgress());
        flapSound.once("load", updateAudioProgress());
        buttonSound.once("load", updateAudioProgress());
        eatSound.once("load", updateAudioProgress());
        loseSound.once("load", updateAudioProgress());
        winSound.once("load", updateAudioProgress());
        overSound.once("load", updateAudioProgress())
    }

    function handleTimer(delta) {
        gameTime -= 1 / Math.round(ticker.FPS);
        timerText.setText(Math.ceil(gameTime));
        elapsedTime += 1 / Math.round(ticker.FPS);
        timerSectorLength = Math.PI / 180 * 360 / timerSectors * elapsedTime;
        //interfaceHolder.removeChild(timerIcon);
        timerIcon = new PIXI.Graphics;
        timerIcon.lineStyle(6, 16724736, 1);
        timerIcon.arc(stageW - 80, stageH - 40, 10, 0, timerSectorLength, false);
        //interfaceHolder.addChild(timerIcon);
        if (Math.ceil(gameTime) <= 0) {
            handleGameOver(true)
        }
    }

    function resetBirdPosition() {
        t.to(enemy2, 0, {
            pixi: {
                rotation: "0",
                overwrite: "all"
            }
        });
        if (enemy2.x > stageW / 2) {
            t.to(enemy2, 6, {
                pixi: {
                    x: 0,
                    rotation: "-30",
                    overwrite: "all"
                }
            })
        } else {
            t.to(enemy2, 6, {
                pixi: {
                    x: stageW,
                    rotation: "30",
                    overwrite: "all"
                }
            })
        }
    }

    function handleObjects(delta) {
        enemy.y += candySpeed;
        enemy2.y += candySpeed;
        enemy3.x += candySpeed * .1;
        enemy3.y += candySpeed;
        if (timePlayed > 15) {
            enemy4.y += candySpeed * .5;
            enemy4.x -= candySpeed;
            if (enemy4.x < -100) {
                enemy4.x = stageW + 250
            }
        }
        for (var i = 0; i < enemies.length; i++) {
            if (timePlayed > 15 && enemies[1].y > stageH) {
                enemies[1].x = 1e4;
                enemies[1].y = -1e4
            }
            if (timePlayed > 10 && enemies[2].y > stageH) {
                enemies[2].x = 1e4;
                enemies[2].y = -1e4
            }
            if (timePlayed < 10 && enemies[2].x > stageW) {
                enemies[2].x = -100
            }
            if (enemies[i].y > stageH + enemies[i].height) {
                if (screenSize === "mobile") {
                    enemies[i].y = Utils.random(-100, -600)
                } else {
                    enemies[i].y = Utils.random(-100, -600)
                }
                enemies[i].x = Utils.random(0, stageW);
                if (timePlayed < 15) {
                    enemies[0].x = 1e4
                }
                if (i == 1) {
                    resetBirdPosition()
                }
            }
            if (Utils.hitTest(enemies[i], airHeadMouthCollision)) {
                if (screenSize === "mobile") {
                    enemies[i].y = Utils.random(-100, -600)
                } else {
                    enemies[i].y = Utils.random(-100, -600)
                }
                enemies[i].x = Utils.random(0, stageW);
                handleEnemyHit();
                loseSound.play();
                if (i == 1) {
                    resetBirdPosition()
                }
            }
        }
        candy5.rotation -= .01;
        candy6.rotation -= .005;
        candy7.rotation += .005;
        for (var i = 0; i < candies.length; i++) {
            candies[i].y += candySpeed;
            if (candies[i].y > stageH + candies[i].height) {
                if (screenSize === "mobile") {
                    candies[i].y = Utils.random(-100, -600)
                } else {
                    candies[i].y = Utils.random(-100, -600)
                }
                candies[i].x = Utils.random(0, stageW)
            }
            if (Utils.hitTest(candies[i], airHeadMouthCollision)) {
                if (screenSize === "mobile") {
                    candies[i].y = Utils.random(-100, -600)
                } else {
                    candies[i].y = Utils.random(-100, -600)
                }
                candies[i].x = Utils.random(0, stageW);
                handleScore();
                eatSound.play()
            }
        }
    }

    function handleBg() {
        street.y += 1.37;
        trees.y += 1.17;
        buildings.y += 1.05;
        cloudsFront.y += .6;
        cloudsBack.y += .4;
        cloudsMid.y += .8;
        starsBack.y += 1.6;
        starsFront.y += 2;
        bgNebula.y += 1.3;
        sky.y += 1.75
    }
    var mSpring = .03;
    var yFix = 0;

    function handleAirHead() {
        if (touchDevice) {
            function initTouchAirheadFix() {
                yFix = 30
            }

            function handleTouch(e) {
                ex = e.data.global.x - 110;
                ey = e.data.global.y - 90;
                dx = (ex - airHead.x) * easing;
                dy = (ey - 120 - airHead.y) * easing;
                ax = dx * mSpring;
                ay = dy * mSpring;
                vx += ax;
                vy += ay;
                vx *= friction;
                vy *= friction
            }
            t.to(head, .75, {
                pixi: {
                    rotation: ax * -6
                }
            });
            t.to(leftLeg, .3, {
                pixi: {
                    rotation: ax * 4 + (ay + 5.3) * -2
                }
            });
            t.to(rightLeg, .3, {
                pixi: {
                    rotation: ax * 4 + (ay + 5.3) * 2
                }
            });
            t.to(leftArm, .1, {
                pixi: {
                    rotation: ax * 4 + (ay + 5.3) * -2
                }
            });
            t.to(rightArm, .1, {
                pixi: {
                    rotation: ax * 4 + (ay + 5.3) * 2
                }
            });
            t.to(lowerLeftArm, .1, {
                pixi: {
                    rotation: ax * 4 + (ay + 5.3) * -2
                }
            });
            t.to(lowerRightArm, .1, {
                pixi: {
                    rotation: ax * 4 + (ay + 5.3) * 2
                }
            });
            t.to(lowerLeftLeg, .1, {
                pixi: {
                    rotation: ax * 4 + (ay + 5.3) * -2
                }
            });
            t.to(lowerRightLeg, .1, {
                pixi: {
                    rotation: ax * 4 + (ay + 5.3) * 2
                }
            });
            t.to(braid, 1, {
                pixi: {
                    rotation: ax * 15 + (ay + 5.3) * 15
                }
            });
            airHead.x += vx;
            airHead.y += vy + yFix;
            stageHit.on("pointermove", handleTouch);
            stageHit.on("pointerdown", initTouchAirheadFix)
        } else {
            mousePos = Utils.getMousePosition();
            dy = (mousePos.y - airHead.y - 150) * easing;
            dx = (mousePos.x - airHead.x - 90) * easing;
            ax = dx * spring;
            ay = dy * spring;
            vx += ax;
            vy += ay;
            vx *= friction;
            vy *= friction;
            t.to(head, .75, { pixi: { rotation: ax * -6 } });
            t.to(leftLeg, .3, { pixi: { rotation: ax * 4 + (ay + 5.3) * -2 } });
            t.to(rightLeg, .3, {
                pixi: {
                    rotation: ax * 4 + (ay + 5.3) * 2
                }
            });
            t.to(leftArm, .1, {
                pixi: {
                    rotation: ax * 4 + (ay + 5.3) * -2
                }
            });
            t.to(rightArm, .1, {
                pixi: {
                    rotation: ax * 4 + (ay + 5.3) * 2
                }
            });
            t.to(lowerLeftArm, .1, {
                pixi: {
                    rotation: ax * 4 + (ay + 5.3) * -2
                }
            });
            t.to(lowerRightArm, .1, {
                pixi: {
                    rotation: ax * 4 + (ay + 5.3) * 2
                }
            });
            t.to(lowerLeftLeg, .1, {
                pixi: {
                    rotation: ax * 4 + (ay + 5.3) * -2
                }
            });
            t.to(lowerRightLeg, .1, {
                pixi: {
                    rotation: ax * 4 + (ay + 5.3) * 2
                }
            });
            t.to(braid, 1, {
                pixi: {
                    rotation: ax * 15 + (ay + 5.3) * 15
                }
            });
            airHead.y += vy + 30;
            airHead.x += vx
        }
    }

    function handleTouch_(e) {
        ex = e.data.global.x - 110;
        ey = e.data.global.y - 90;
        dx = (ex - airHead.x) * easing;
        dy = (ey - 120 - airHead.y) * easing;
        ax = dx * mSpring;
        ay = dy * mSpring;
        vx += ax;
        vy += ay;
        vx *= friction;
        vy *= friction
    }
    var lives = 3;

    function handleEnemyHit() {
        lives--;
        if (lives == 2) {
            t.to(heart3, .05, {
                pixi: {
                    alpha: 0
                },
                ease: Power3.easeOut,
                yoyo: true,
                repeat: 4
            })
        } else if (lives == 1) {
            t.to(heart2, .05, {
                pixi: {
                    alpha: 0
                },
                ease: Power3.easeOut,
                yoyo: true,
                repeat: 4
            })
        } else {
            heart1.alpha = 0;
            handleGameOver(false)
        }
    }

    function handleScore() {
        score += 1;
        scoreText.setText(score);
        candySpeed += .15;
        head.play();
        head.onComplete = function() {
            setTimeout(function() {
                head.gotoAndStop(0)
            }, 500)
        }
    }

    function handleGameOver(won) {
        gamePlaying = false;
        gamePlayTimerIncrease = false;
        timePlayed = 0;
        endframe.visible = true;
        yourScoreText.setText(" Your score: " + score + " ");
        if (screenSize === "desktop") {
            yourScoreText.position.set(stageW / 3 - yourScoreText.width / 2, 168)
        } else if (screenSize === "tablet") {
            yourScoreText.position.set(stageW / 3 - yourScoreText.width / 2, stageH / 2 - yourScoreText.height)
        } else if (screenSize === "mobile") {
            yourScoreText.position.set(stageW / 2 - yourScoreText.width / 2, stageH / 2 - yourScoreText.height * 2)
        }
        ticker.stop();
        if (won == true) {
            winSound.play()
        }
        if (won == false) {
            overSound.play()
        }
        bgSound.stop();
        t.from(endframeLogo, 1.5, {
            pixi: {
                scale: 0
            },
            delay: 0,
            ease: Elastic.easeOut
        });
        t.from(endframeCandy, 1.5, {
            pixi: {
                scale: 0
            },
            delay: .15,
            ease: Elastic.easeOut
        });
        t.from(yourScoreText, .4, {
            pixi: {
                y: "+=400",
                alpha: 0
            },
            delay: .3,
            ease: Power3.easeOut
        });
        t.from(endSubhead, .4, {
            pixi: {
                y: "+=400",
                alpha: 0
            },
            delay: .45,
            ease: Power3.easeOut
        });
        t.from(ctaHolderEndframe1, .4, {
            pixi: {
                y: "+=400",
                alpha: 0
            },
            delay: .6,
            ease: Power3.easeOut
        });
        t.from(ctaHolderEndframe2, .4, {
            pixi: {
                y: "+=400",
                alpha: 0
            },
            delay: .75,
            ease: Power3.easeOut
        });
        t.from(endframeAirheadLogo, 1.5, {
            pixi: {
                scale: 0
            },
            delay: .9,
            ease: Elastic.easeOut
        })
    }

    function loadProgressHandler() {
        loadingText.setText("LOADING " + Math.round(loader.progress) + "%")
    }

    function candyIntro(delta) {
        for (var i = 0; i < candies.length; i++) {
            candies[i].x -= candySpeed;
            if (candies[i].x < 0 - candies[i].width) {
                candies[i].x = stageW + candies[i].width;
                candies[i].y = Utils.random(150, stageH - 100)
            }
        }
    }
    var speed = 20;
    var angle = 45;
    var dx, dy, ax, ay;
    var vx = 0;
    var vy = 0;
    var zx = 0,
        zy = 0;
    var easing = 1;
    var spring = .04;
    var friction = .85;
    var gravity = 2;
    var bodySpring = 2;
    var bodyFriction = .95;
    var flopRate = 2.5;
    var bodyFlopRate = 1.5;
    introTicker.add(function(delta) {
        bgScroll();
        candyIntro(delta)
    });

    function setUpReplay() {
        resetBirdPosition();
        gamePlayTimerIncrease = true;
        timePlayed = 0;
        endframe.visible = false;
        heart1.alpha = 1;
        heart2.alpha = 1;
        heart3.alpha = 1;
        bgSound.play();
        ticker.start();
        for (var i = 0; i < candies.length; i++) {
            if (screenSize === "mobile") {
                candies[i].y = Utils.random(-100, -600);
                candies[i].x = Utils.random(0, stageW)
            } else {
                candies[i].y = Utils.random(-100, -600);
                candies[i].x = Utils.random(0, stageW)
            }
        }
        for (var i = 0; i < enemies.length; i++) {
            enemies[i].anchor.set(.5, 0);
            if (screenSize === "mobile") {
                enemies[i].y = Utils.random(-100, -600);
                enemies[i].x = Utils.random(0, stageW)
            } else {
                enemies[i].y = Utils.random(-100, -600);
                enemies[i].x = Utils.random(0, stageW)
            }
        }
        enemy.x = 1e4;
        sky.position.set(0, -sky.height + stageH);
        street.position.set(0, stageH - street.height);
        trees.position.set(0, 290);
        buildings.position.set(0, 220);
        if (screenSize == "mobile") {
            buildings.position.set(0, 420);
            trees.position.set(0, 5e3)
        }
        cloudsFront.position.set(0, 200);
        cloudsBack.position.set(0, -200);
        cloudsMid.position.set(0, -1100);
        bgNebula.position.set(0, sky.y + 700);
        starsBack.position.set(0, sky.y + 500);
        starsFront.position.set(0, sky.y - 420);
        candySpeed = 3;
        gameTime = 30;
        elapsedTime = 0;
        score = 0;
        scoreText.setText(score);
        lives = 3
    }
    var adClose = false;
    var n_width, n_height, n_orientation;
    var resized = false;
    var resizeTimer;
    var orientation = Math.abs(window.orientation);

    function resetResizeTimer() {
        setTimeout(function() {
            clearTimeout(resizeTimer);
            resized = false
        }, 1e3)
    }
    var init_orientation = Math.abs(window.orientation);
    var rotateMe = $("#rotateMe");
    t.set(rotateMe, {
        autoAlpha: 0
    });
    if (isMobile === true && Math.abs(window.orientation) === 90) {
        t.set(rotateMe, {
            autoAlpha: 1
        })
    }
    
    window.addEventListener('blur', function(){
	    Howler.volume(0);
    });
    
    window.addEventListener('focus', function(){
	    Howler.volume(0.5);
    });
    
    window.addEventListener("pagehide", function(){
         Howler.volume(0);
    }, false);
    
    window.addEventListener("pageshow", function(){
         Howler.volume(0.5);
    }, false);
    
    window.addEventListener("orientationchange", function() {
        n_orientation = Math.abs(window.orientation);
        if (isMobile === true) {
            if (Math.abs(window.orientation) === 0) {
                if (init_orientation === 90) {
                    window.location.reload(false)
                }
                t.set(rotateMe, {
                    autoAlpha: 0
                });
                if (gamePlaying === true) {
                    ticker.start();
                    Howler.volume(.5)
                }
            }
            if (Math.abs(window.orientation) === 90) {
                t.set(rotateMe, {
                    autoAlpha: 1
                });
                if (gamePlaying === true) {
                    ticker.stop();
                    Howler.volume(0)
                }
            }
        }
    })
}